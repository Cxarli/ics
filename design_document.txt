# Purpose
The ics crate should provide a meaningful way to create correct iCalender files without becoming difficult or verbose. At the same time the crate should be easy to integrate into other projects.

# Description of the Specification
An iCalender file is one calendar component containing other components such as: event, todo, journal, freebusy or timezone. Those components can contain components and/or properties which is a key-value pair that can optionally have parameters which are also a key-value pairs. Some components can contain subcomponents. Properties can reappear depending on the specification. After 75 bytes a newline is inserted (CRLF). For now ics only supports RFC 5545.

# Structure
The crate contains a "low-level" and "high-level" interface. The basic components in the components module can be used to create new custom iCalender components, properties and parameters. This is much more low-level which most users won't need. The high-level components are specified by the RFC 5545. However, if more control is needed, custom properties and custom components can still be added. The ICalendar component is the calendar object which contains a stream of properties and components. Those components are also just a stream of properties and subcomponents.

## Basic Structure
ICalendar
|__VERSION
|__PRODID
|__Event
   |__UID
   |__DTSTAMP
   |__Other Properties
   |__Alarm(s)
      |__AUDIO
      |__DISPLAY
      |__EMAIL
   |__Other Components
|__ToDO
   |__UID
   |__DTSTAMP
   |__Other Properties
   |__Alarm(s)
      |__AUDIO
      |__DISPLAY
      |__EMAIL
   |__Other Components
|__Journal
   |__UID
   |__DTSTAMP
   |__Other Properties
   |__Other Components
|__FreeBusy
   |__UID
   |__DTSTAMP
   |__Other Properties
   |__Other Components
|__TimeZone
   |__TZID
   |__Other Properties
   |__ZoneTime(s)
      |__STANDARD
      |__DAYLIGHT
   |__Other Components
|__Other Properties
|__Other Components

# Implementation
- The user is responsible for checking the proper usage of components and properties. The crate only tries to guide the user by the defined specification.
- Types for defined properties and parameters are created with macros and also used for common trait implementations for a rich and flexible type system.
- The specific methods/parameters on the components suggest the correct usage defined by the RFC, however, there are more generic methods for more needs.
- To keep memory consumption lower, the values of the properties are Cow which helps with avoiding allocations since the keys, names, values etc. are of type String.
- Content Lines are properly escaped in properties.
- The builder pattern was avoided due to the need to create many convenience methods which are also inflexible since adding parameters is cumbersome.
- All types implement the Display trait, so the objects can be written to a file.
- There are no checks or error handling which the user of the crate must handle.

## Issues
- Documentation is still missing.
- Missing integration tests for most components.
- The fold_line tests are horrible.
-----------------------------------------------------------------------------
- Quoting method is still missing.
- Regex should be a feature but by default set. (no dependencies aka no_std)
- Keys are of type String even though they never change.
- The crate does not handle lists/multiple values especially for parameters.

# Possible Solutions
- In constructors make the key &str and internally Cow.
- Extend the parameters! macro.
- Make regex a feature by default.

# RoadMap & Future
- no_std support
- Implement Deref instead of Into<Component>.
- Add more methods for interacting with objects.
  - search
  - remove/calendar
  - getters and setters
- Add a parser (FromStr or parser generator).
  - check methods
- Since everything is actually is text, the rope structure could be used for insertion and searching properties. This, however, requires extensive research but shouldn't affect the interface so much. Maybe it should be a feature.